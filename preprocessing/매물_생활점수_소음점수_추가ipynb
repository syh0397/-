{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "\b생활점수_소음점수_추가.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyP3NOPkFey+FKYraRqOiAs+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/syh0397/Charter-Dashboard-for-Newbies/blob/main/%08%EC%83%9D%ED%99%9C%EC%A0%90%EC%88%98_%EC%86%8C%EC%9D%8C%EC%A0%90%EC%88%98_%EC%B6%94%EA%B0%80.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gu8Je_zYRm7R",
        "outputId": "8dfcd7e5-b71c-4cde-e811-141075e6736b"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "SrT9O5biQ-Y4",
        "outputId": "2708b8d2-04be-4b41-eb0d-7661cf904306"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      자치구명  법정동코드    법정동명                    지번주소            건물명   층   임대건물명  \\\n",
              "0     영등포구  11300   당산동3가  서울특별시 영등포구 당산동3가 398-1          당산파크뷰   3    오피스텔   \n",
              "1     영등포구  11300   당산동3가  서울특별시 영등포구 당산동3가 398-1          당산파크뷰   6    오피스텔   \n",
              "2     영등포구  10300  영등포동2가   서울특별시 영등포구 영등포동2가 175  여의도 해링턴타워 196  12    오피스텔   \n",
              "3     영등포구  10300  영등포동2가   서울특별시 영등포구 영등포동2가 175  여의도 해링턴타워 196  14    오피스텔   \n",
              "4     영등포구  10300  영등포동2가   서울특별시 영등포구 영등포동2가 175  여의도 해링턴타워 196  11    오피스텔   \n",
              "...    ...    ...     ...                     ...            ...  ..     ...   \n",
              "1185   관악구  10100     봉천동    서울특별시 관악구 봉천동 886-63       (886-63)   1  다세대/연립   \n",
              "1186   관악구  10100     봉천동     서울특별시 관악구 봉천동 941-2             삼성   3     아파트   \n",
              "1187   동작구  10200     상도동       서울특별시 동작구 상도동 488          강남아파트   5     아파트   \n",
              "1188   동작구  10200     상도동       서울특별시 동작구 상도동 488          강남아파트   4     아파트   \n",
              "1189  영등포구  10100    영등포동  서울특별시 영등포구 영등포동 618-83             영일   4     아파트   \n",
              "\n",
              "       임대면적 전월세구분    보증금  ...   latitude   longitude  conv_num  \\\n",
              "0     16.83   준월세   3000  ...  37.525786  126.894982        18   \n",
              "1     17.42   준전세  15000  ...  37.525786  126.894982        18   \n",
              "2     18.10   준월세   1000  ...  37.519263  126.909762        24   \n",
              "3     18.10   준월세   1000  ...  37.519263  126.909762        24   \n",
              "4     18.10   준월세   1000  ...  37.519263  126.909762        24   \n",
              "...     ...   ...    ...  ...        ...         ...       ...   \n",
              "1185  32.27    월세    500  ...  37.483353  126.949078        16   \n",
              "1186  64.12   준전세  11000  ...  37.485960  126.940335         9   \n",
              "1187  54.41   준월세   1000  ...  37.496943  126.953539        10   \n",
              "1188  48.83   준월세   3000  ...  37.496943  126.953539        10   \n",
              "1189  38.02    전세  11500  ...  37.513862  126.906414         8   \n",
              "\n",
              "      in_din_total_300  in_mart_total_1000  in_subway_total_500  \\\n",
              "0                  325                   7                    2   \n",
              "1                  325                   7                    2   \n",
              "2                  330                   4                    2   \n",
              "3                  330                   4                    2   \n",
              "4                  330                   4                    2   \n",
              "...                ...                 ...                  ...   \n",
              "1185               155                   3                    1   \n",
              "1186               169                   2                    1   \n",
              "1187               125                   2                    1   \n",
              "1188               125                   2                    1   \n",
              "1189               197                   6                    1   \n",
              "\n",
              "      in_hosp_total_1000  in_cafe_total_300  police_500  center_500  \n",
              "0                    128                 69           0           2  \n",
              "1                    128                 69           0           2  \n",
              "2                    133                 21           2           1  \n",
              "3                    133                 21           2           1  \n",
              "4                    133                 21           2           1  \n",
              "...                  ...                ...         ...         ...  \n",
              "1185                 225                 21           1           1  \n",
              "1186                 143                 24           2           1  \n",
              "1187                  59                 24           2           1  \n",
              "1188                  59                 24           2           1  \n",
              "1189                 170                 41           2           1  \n",
              "\n",
              "[1190 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0795d8cb-343f-4783-bc0d-19f238d7ab66\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>자치구명</th>\n",
              "      <th>법정동코드</th>\n",
              "      <th>법정동명</th>\n",
              "      <th>지번주소</th>\n",
              "      <th>건물명</th>\n",
              "      <th>층</th>\n",
              "      <th>임대건물명</th>\n",
              "      <th>임대면적</th>\n",
              "      <th>전월세구분</th>\n",
              "      <th>보증금</th>\n",
              "      <th>...</th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>conv_num</th>\n",
              "      <th>in_din_total_300</th>\n",
              "      <th>in_mart_total_1000</th>\n",
              "      <th>in_subway_total_500</th>\n",
              "      <th>in_hosp_total_1000</th>\n",
              "      <th>in_cafe_total_300</th>\n",
              "      <th>police_500</th>\n",
              "      <th>center_500</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>영등포구</td>\n",
              "      <td>11300</td>\n",
              "      <td>당산동3가</td>\n",
              "      <td>서울특별시 영등포구 당산동3가 398-1</td>\n",
              "      <td>당산파크뷰</td>\n",
              "      <td>3</td>\n",
              "      <td>오피스텔</td>\n",
              "      <td>16.83</td>\n",
              "      <td>준월세</td>\n",
              "      <td>3000</td>\n",
              "      <td>...</td>\n",
              "      <td>37.525786</td>\n",
              "      <td>126.894982</td>\n",
              "      <td>18</td>\n",
              "      <td>325</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>128</td>\n",
              "      <td>69</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>영등포구</td>\n",
              "      <td>11300</td>\n",
              "      <td>당산동3가</td>\n",
              "      <td>서울특별시 영등포구 당산동3가 398-1</td>\n",
              "      <td>당산파크뷰</td>\n",
              "      <td>6</td>\n",
              "      <td>오피스텔</td>\n",
              "      <td>17.42</td>\n",
              "      <td>준전세</td>\n",
              "      <td>15000</td>\n",
              "      <td>...</td>\n",
              "      <td>37.525786</td>\n",
              "      <td>126.894982</td>\n",
              "      <td>18</td>\n",
              "      <td>325</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>128</td>\n",
              "      <td>69</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>영등포구</td>\n",
              "      <td>10300</td>\n",
              "      <td>영등포동2가</td>\n",
              "      <td>서울특별시 영등포구 영등포동2가 175</td>\n",
              "      <td>여의도 해링턴타워 196</td>\n",
              "      <td>12</td>\n",
              "      <td>오피스텔</td>\n",
              "      <td>18.10</td>\n",
              "      <td>준월세</td>\n",
              "      <td>1000</td>\n",
              "      <td>...</td>\n",
              "      <td>37.519263</td>\n",
              "      <td>126.909762</td>\n",
              "      <td>24</td>\n",
              "      <td>330</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>133</td>\n",
              "      <td>21</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>영등포구</td>\n",
              "      <td>10300</td>\n",
              "      <td>영등포동2가</td>\n",
              "      <td>서울특별시 영등포구 영등포동2가 175</td>\n",
              "      <td>여의도 해링턴타워 196</td>\n",
              "      <td>14</td>\n",
              "      <td>오피스텔</td>\n",
              "      <td>18.10</td>\n",
              "      <td>준월세</td>\n",
              "      <td>1000</td>\n",
              "      <td>...</td>\n",
              "      <td>37.519263</td>\n",
              "      <td>126.909762</td>\n",
              "      <td>24</td>\n",
              "      <td>330</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>133</td>\n",
              "      <td>21</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>영등포구</td>\n",
              "      <td>10300</td>\n",
              "      <td>영등포동2가</td>\n",
              "      <td>서울특별시 영등포구 영등포동2가 175</td>\n",
              "      <td>여의도 해링턴타워 196</td>\n",
              "      <td>11</td>\n",
              "      <td>오피스텔</td>\n",
              "      <td>18.10</td>\n",
              "      <td>준월세</td>\n",
              "      <td>1000</td>\n",
              "      <td>...</td>\n",
              "      <td>37.519263</td>\n",
              "      <td>126.909762</td>\n",
              "      <td>24</td>\n",
              "      <td>330</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>133</td>\n",
              "      <td>21</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1185</th>\n",
              "      <td>관악구</td>\n",
              "      <td>10100</td>\n",
              "      <td>봉천동</td>\n",
              "      <td>서울특별시 관악구 봉천동 886-63</td>\n",
              "      <td>(886-63)</td>\n",
              "      <td>1</td>\n",
              "      <td>다세대/연립</td>\n",
              "      <td>32.27</td>\n",
              "      <td>월세</td>\n",
              "      <td>500</td>\n",
              "      <td>...</td>\n",
              "      <td>37.483353</td>\n",
              "      <td>126.949078</td>\n",
              "      <td>16</td>\n",
              "      <td>155</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>225</td>\n",
              "      <td>21</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1186</th>\n",
              "      <td>관악구</td>\n",
              "      <td>10100</td>\n",
              "      <td>봉천동</td>\n",
              "      <td>서울특별시 관악구 봉천동 941-2</td>\n",
              "      <td>삼성</td>\n",
              "      <td>3</td>\n",
              "      <td>아파트</td>\n",
              "      <td>64.12</td>\n",
              "      <td>준전세</td>\n",
              "      <td>11000</td>\n",
              "      <td>...</td>\n",
              "      <td>37.485960</td>\n",
              "      <td>126.940335</td>\n",
              "      <td>9</td>\n",
              "      <td>169</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>143</td>\n",
              "      <td>24</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1187</th>\n",
              "      <td>동작구</td>\n",
              "      <td>10200</td>\n",
              "      <td>상도동</td>\n",
              "      <td>서울특별시 동작구 상도동 488</td>\n",
              "      <td>강남아파트</td>\n",
              "      <td>5</td>\n",
              "      <td>아파트</td>\n",
              "      <td>54.41</td>\n",
              "      <td>준월세</td>\n",
              "      <td>1000</td>\n",
              "      <td>...</td>\n",
              "      <td>37.496943</td>\n",
              "      <td>126.953539</td>\n",
              "      <td>10</td>\n",
              "      <td>125</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>59</td>\n",
              "      <td>24</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1188</th>\n",
              "      <td>동작구</td>\n",
              "      <td>10200</td>\n",
              "      <td>상도동</td>\n",
              "      <td>서울특별시 동작구 상도동 488</td>\n",
              "      <td>강남아파트</td>\n",
              "      <td>4</td>\n",
              "      <td>아파트</td>\n",
              "      <td>48.83</td>\n",
              "      <td>준월세</td>\n",
              "      <td>3000</td>\n",
              "      <td>...</td>\n",
              "      <td>37.496943</td>\n",
              "      <td>126.953539</td>\n",
              "      <td>10</td>\n",
              "      <td>125</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>59</td>\n",
              "      <td>24</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1189</th>\n",
              "      <td>영등포구</td>\n",
              "      <td>10100</td>\n",
              "      <td>영등포동</td>\n",
              "      <td>서울특별시 영등포구 영등포동 618-83</td>\n",
              "      <td>영일</td>\n",
              "      <td>4</td>\n",
              "      <td>아파트</td>\n",
              "      <td>38.02</td>\n",
              "      <td>전세</td>\n",
              "      <td>11500</td>\n",
              "      <td>...</td>\n",
              "      <td>37.513862</td>\n",
              "      <td>126.906414</td>\n",
              "      <td>8</td>\n",
              "      <td>197</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>170</td>\n",
              "      <td>41</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1190 rows × 23 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0795d8cb-343f-4783-bc0d-19f238d7ab66')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0795d8cb-343f-4783-bc0d-19f238d7ab66 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0795d8cb-343f-4783-bc0d-19f238d7ab66');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "import json\n",
        "import requests\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "df = pd.read_csv('/content/drive/MyDrive/DATA/비저블 맵 프로젝트/진짜 사용할 데이터/서울시전월세_점수추가.csv')\n",
        "df = df.drop(columns = ['Unnamed: 0','Unnamed: 0.1'])\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class KakaoLocalAPI:\n",
        "    \"\"\"\n",
        "    Kakao Local API 컨트롤러\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, rest_api_key):\n",
        "        \"\"\"\n",
        "        Rest API키 초기화 및 기능 별 URL 설정\n",
        "        \"\"\"\n",
        "\n",
        "        # REST API 키 설정\n",
        "        self.rest_api_key = '650c8233432728848e448a6d76f3f155'\n",
        "        self.headers = {\"Authorization\": \"KakaoAK {}\".format(rest_api_key)}\n",
        "\n",
        "        # 서비스 별 URL 설정\n",
        "\n",
        "        # 01 주소 검색\n",
        "        self.URL_01 = \"https://dapi.kakao.com/v2/local/search/address.json\"\n",
        "        # 02 좌표-행정구역정보 변환\n",
        "        self.URL_02 = \"https://dapi.kakao.com/v2/local/geo/coord2regioncode.json\"\n",
        "        # 03 좌표-주소 변환\n",
        "        self.URL_03 = \"https://dapi.kakao.com/v2/local/geo/coord2address.json\"\n",
        "        # 04 좌표계 변환\n",
        "        self.URL_04 = \"https://dapi.kakao.com/v2/local/geo/transcoord.json\"\n",
        "        # 05 키워드 검색\n",
        "        self.URL_05 = \"https://dapi.kakao.com/v2/local/search/keyword.json\"\n",
        "        # 06 카테고리 검색\n",
        "        self.URL_06 = \"https://dapi.kakao.com/v2/local/search/category.json\"\n",
        "\n",
        "    def search_address(self, query, analyze_type=None, page=None, size=None):\n",
        "        \"\"\"\n",
        "        01 주소 검색\n",
        "        \"\"\"\n",
        "        params = {\"query\": f\"{query}\"}\n",
        "\n",
        "        if analyze_type != None:\n",
        "            params[\"analyze_type\"] = f\"{analyze_type}\"\n",
        "\n",
        "        if page != None:\n",
        "            params['page'] = f\"{page}\"\n",
        "\n",
        "        if size != None:\n",
        "            params['size'] = f\"{size}\"\n",
        "\n",
        "        res = requests.get(self.URL_01, headers=self.headers, params=params)\n",
        "        document = json.loads(res.text)\n",
        "\n",
        "        return document\n",
        "    \n",
        "    def geo_coord2regioncode(self, x, y, input_coord=None, output_coord=None):\n",
        "        \"\"\"\n",
        "        02 좌표-행정구역정보 변환\n",
        "        \"\"\"\n",
        "        params = {\"x\": f\"{x}\",\n",
        "                  \"y\": f\"{y}\"}\n",
        "        \n",
        "        if input_coord != None:\n",
        "            params['input_coord'] = f\"{input_coord}\"\n",
        "        \n",
        "        if output_coord != None:\n",
        "            params['output_coord'] = f\"{output_coord}\"\n",
        "            \n",
        "        res = requests.get(self.URL_02, headers=self.headers, params=params)\n",
        "        document = json.loads(res.text)\n",
        "        \n",
        "        return document\n",
        "        \n",
        "    \n",
        "    def geo_coord2address(self, x, y, input_coord=None):\n",
        "        \"\"\"\n",
        "        03 좌표-주소 변환\n",
        "        \"\"\"\n",
        "        params = {\"x\": f\"{x}\",\n",
        "                  \"y\": f\"{y}\"}\n",
        "        \n",
        "        if input_coord != None:\n",
        "            params['input_coord'] = f\"{input_coord}\"\n",
        "            \n",
        "        res = requests.get(self.URL_03, headers=self.headers, params=params)\n",
        "        document = json.loads(res.text)\n",
        "        \n",
        "        return document\n",
        "        \n",
        "    \n",
        "    def geo_transcoord(self, x, y, output_coord, input_coord=None):\n",
        "        \"\"\"\n",
        "        04 좌표계 변환\n",
        "        \"\"\"\n",
        "        params = {\"x\": f\"{x}\",\n",
        "                  \"y\": f\"{y}\",\n",
        "                  \"output_coord\": f\"{output_coord}\"}\n",
        "        \n",
        "        if input_coord != None:\n",
        "            params['input_coord'] = f\"{input_coord}\"\n",
        "        \n",
        "        res = requests.get(self.URL_04, headers=self.headers, params=params)\n",
        "        document = json.loads(res.text)\n",
        "        \n",
        "        return document\n",
        "        \n",
        "    \n",
        "    def search_keyword(self,query,category_group_code=None,x=None,y=None,radius=None,rect=None,page=None,size=None,sort=None):\n",
        "        \"\"\"\n",
        "        05 키워드 검색\n",
        "        \"\"\"\n",
        "        params = {\"query\": f\"{query}\"}\n",
        "        \n",
        "        if category_group_code != None:\n",
        "            params['category_group_code'] = f\"{category_group_code}\"\n",
        "        if x != None:\n",
        "            params['x'] = f\"{x}\"\n",
        "        if y != None:\n",
        "            params['y'] = f\"{y}\"\n",
        "        if radius != None:\n",
        "            params['radius'] = f\"{radius}\"\n",
        "        if rect != None:\n",
        "            params['rect'] = f\"{rect}\"\n",
        "        if page != None:\n",
        "            params['page'] = f\"{page}\"\n",
        "        if size != None:\n",
        "            params['size'] = f\"{params}\"\n",
        "        if sort != None:\n",
        "            params['sort'] = f\"{sort}\"\n",
        "        \n",
        "        res = requests.get(self.URL_05, headers=self.headers, params=params)\n",
        "        document = json.loads(res.text)\n",
        "        \n",
        "        return document\n",
        "    \n",
        "            \n",
        "        \n",
        "    def search_category(self, category_group_code, x, y, radius=None, rect=None, page=None, size=None, sort=None):\n",
        "        \"\"\"\n",
        "        06 카테고리 검색\n",
        "        \"\"\"\n",
        "        params = {'category_group_code': f\"{category_group_code}\",\n",
        "                  'x': f\"{x}\",\n",
        "                  'y': f\"{y}\"}\n",
        "        \n",
        "        if radius != None:\n",
        "            params['radius'] = f\"{radius}\"\n",
        "        if rect != None:\n",
        "            params['rect'] = f\"{rect}\"\n",
        "        if page != None:\n",
        "            params['page'] = f\"{page}\"\n",
        "        if size != None:\n",
        "            params['size'] = f\"{size}\"\n",
        "        if sort != None:\n",
        "            params['sort'] = f\"{sort}\"\n",
        "            \n",
        "        res = requests.get(self.URL_06, headers=self.headers, params=params)\n",
        "        document = json.loads(res.text)\n",
        "        \n",
        "        return document"
      ],
      "metadata": {
        "id": "4q2gsPGnSQNM"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# REST API 키\n",
        "rest_api_key = \"650c8233432728848e448a6d76f3f155\"\n",
        "\n",
        "kakao = KakaoLocalAPI(rest_api_key)"
      ],
      "metadata": {
        "id": "jutslpVUTRPN"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 음식점 50미터 안 "
      ],
      "metadata": {
        "id": "QaCOe4MATVuh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "in_din_total_50 = []\n",
        "office = []\n",
        "\n",
        "for i in range(len(df)):\n",
        "  # 음식점 \n",
        "  category_group_code = \"FD6\"\n",
        "  x = df['longitude'][i]\n",
        "  y = df['latitude'][i]\n",
        "  radius = 50\n",
        "\n",
        "  ## Request\n",
        "  result_ = kakao.search_category(category_group_code, x, y, radius)\n",
        "  # 확인용 (places)\n",
        "  # places = requests.get(url, params=params, headers=headers).json()['documents']\n",
        "  \n",
        "  Dini_total_count = result_['meta']['total_count']\n",
        "  in_din_total_50.append(Dini_total_count)\n",
        "\n",
        "# 데이터 프레임\n",
        "num = pd.DataFrame()\n",
        "num['in_din_total_50'] = in_din_total_50"
      ],
      "metadata": {
        "id": "OPL0zkAKTS8t"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "v9zr48r6ZkwH",
        "outputId": "b23ff7f9-c534-481a-d467-d07071e49909"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      in_din_total_50\n",
              "0                   8\n",
              "1                   8\n",
              "2                   2\n",
              "3                   2\n",
              "4                   2\n",
              "...               ...\n",
              "1185                0\n",
              "1186               13\n",
              "1187               15\n",
              "1188               15\n",
              "1189               16\n",
              "\n",
              "[1190 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ee5754c7-52cc-48de-830f-459f01308a10\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>in_din_total_50</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1185</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1186</th>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1187</th>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1188</th>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1189</th>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1190 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ee5754c7-52cc-48de-830f-459f01308a10')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ee5754c7-52cc-48de-830f-459f01308a10 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ee5754c7-52cc-48de-830f-459f01308a10');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['in_din_total_50'] = in_din_total_50"
      ],
      "metadata": {
        "id": "JvOh1tDIT6tH"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 지하철 50미터안 "
      ],
      "metadata": {
        "id": "swmCpUFPThT8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "in_subway_total_50 = []\n",
        "office = []\n",
        "\n",
        "for i in range(len(df)):\n",
        "  # 음식점 \n",
        "  category_group_code = \"SW8\"\n",
        "  x = df['longitude'][i]\n",
        "  y = df['latitude'][i]\n",
        "  radius = 50\n",
        "\n",
        "  ## Request\n",
        "  result_ = kakao.search_category(category_group_code, x, y, radius)\n",
        "  # 확인용 (places)\n",
        "  # places = requests.get(url, params=params, headers=headers).json()['documents']\n",
        "  \n",
        "  total_count = result_['meta']['total_count']\n",
        "  in_subway_total_50.append(total_count)\n",
        "\n",
        "# 데이터 프레임\n",
        "num = pd.DataFrame()\n",
        "num['in_subway_total_50'] = in_subway_total_50"
      ],
      "metadata": {
        "id": "zpHf8wbBTisF"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['in_subway_total_50'] = in_subway_total_50"
      ],
      "metadata": {
        "id": "Qzvus0TpajB-"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## 점수 추가 완성 \n",
        "df.to_csv('/content/drive/MyDrive/DATA/비저블 맵 프로젝트/Real_Score')"
      ],
      "metadata": {
        "id": "ELh_t-sCetPT"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 시각화 & 점수"
      ],
      "metadata": {
        "id": "BYYqaP3kruLu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/drive/MyDrive/DATA/비저블 맵 프로젝트/Real_Score')\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "rfblz7RiLYxS",
        "outputId": "b1f3765f-8a83-4292-910c-dd0b09afd3a7"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0  자치구명  법정동코드    법정동명                    지번주소            건물명   층  \\\n",
              "0           0  영등포구  11300   당산동3가  서울특별시 영등포구 당산동3가 398-1          당산파크뷰   3   \n",
              "1           1  영등포구  11300   당산동3가  서울특별시 영등포구 당산동3가 398-1          당산파크뷰   6   \n",
              "2           2  영등포구  10300  영등포동2가   서울특별시 영등포구 영등포동2가 175  여의도 해링턴타워 196  12   \n",
              "3           3  영등포구  10300  영등포동2가   서울특별시 영등포구 영등포동2가 175  여의도 해링턴타워 196  14   \n",
              "4           4  영등포구  10300  영등포동2가   서울특별시 영등포구 영등포동2가 175  여의도 해링턴타워 196  11   \n",
              "\n",
              "  임대건물명   임대면적 전월세구분  ...  conv_num  in_din_total_300  in_mart_total_1000  \\\n",
              "0  오피스텔  16.83   준월세  ...        18               325                   7   \n",
              "1  오피스텔  17.42   준전세  ...        18               325                   7   \n",
              "2  오피스텔  18.10   준월세  ...        24               330                   4   \n",
              "3  오피스텔  18.10   준월세  ...        24               330                   4   \n",
              "4  오피스텔  18.10   준월세  ...        24               330                   4   \n",
              "\n",
              "   in_subway_total_500  in_hosp_total_1000  in_cafe_total_300  police_500  \\\n",
              "0                    2                 128                 69           0   \n",
              "1                    2                 128                 69           0   \n",
              "2                    2                 133                 21           2   \n",
              "3                    2                 133                 21           2   \n",
              "4                    2                 133                 21           2   \n",
              "\n",
              "   center_500  in_din_total_50  in_subway_total_50  \n",
              "0           2                8                   0  \n",
              "1           2                8                   0  \n",
              "2           1                2                   0  \n",
              "3           1                2                   0  \n",
              "4           1                2                   0  \n",
              "\n",
              "[5 rows x 26 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-26f0dd4d-6b48-41b4-b9b3-aa642944ba78\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>자치구명</th>\n",
              "      <th>법정동코드</th>\n",
              "      <th>법정동명</th>\n",
              "      <th>지번주소</th>\n",
              "      <th>건물명</th>\n",
              "      <th>층</th>\n",
              "      <th>임대건물명</th>\n",
              "      <th>임대면적</th>\n",
              "      <th>전월세구분</th>\n",
              "      <th>...</th>\n",
              "      <th>conv_num</th>\n",
              "      <th>in_din_total_300</th>\n",
              "      <th>in_mart_total_1000</th>\n",
              "      <th>in_subway_total_500</th>\n",
              "      <th>in_hosp_total_1000</th>\n",
              "      <th>in_cafe_total_300</th>\n",
              "      <th>police_500</th>\n",
              "      <th>center_500</th>\n",
              "      <th>in_din_total_50</th>\n",
              "      <th>in_subway_total_50</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>영등포구</td>\n",
              "      <td>11300</td>\n",
              "      <td>당산동3가</td>\n",
              "      <td>서울특별시 영등포구 당산동3가 398-1</td>\n",
              "      <td>당산파크뷰</td>\n",
              "      <td>3</td>\n",
              "      <td>오피스텔</td>\n",
              "      <td>16.83</td>\n",
              "      <td>준월세</td>\n",
              "      <td>...</td>\n",
              "      <td>18</td>\n",
              "      <td>325</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>128</td>\n",
              "      <td>69</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>영등포구</td>\n",
              "      <td>11300</td>\n",
              "      <td>당산동3가</td>\n",
              "      <td>서울특별시 영등포구 당산동3가 398-1</td>\n",
              "      <td>당산파크뷰</td>\n",
              "      <td>6</td>\n",
              "      <td>오피스텔</td>\n",
              "      <td>17.42</td>\n",
              "      <td>준전세</td>\n",
              "      <td>...</td>\n",
              "      <td>18</td>\n",
              "      <td>325</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>128</td>\n",
              "      <td>69</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>영등포구</td>\n",
              "      <td>10300</td>\n",
              "      <td>영등포동2가</td>\n",
              "      <td>서울특별시 영등포구 영등포동2가 175</td>\n",
              "      <td>여의도 해링턴타워 196</td>\n",
              "      <td>12</td>\n",
              "      <td>오피스텔</td>\n",
              "      <td>18.10</td>\n",
              "      <td>준월세</td>\n",
              "      <td>...</td>\n",
              "      <td>24</td>\n",
              "      <td>330</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>133</td>\n",
              "      <td>21</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>영등포구</td>\n",
              "      <td>10300</td>\n",
              "      <td>영등포동2가</td>\n",
              "      <td>서울특별시 영등포구 영등포동2가 175</td>\n",
              "      <td>여의도 해링턴타워 196</td>\n",
              "      <td>14</td>\n",
              "      <td>오피스텔</td>\n",
              "      <td>18.10</td>\n",
              "      <td>준월세</td>\n",
              "      <td>...</td>\n",
              "      <td>24</td>\n",
              "      <td>330</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>133</td>\n",
              "      <td>21</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>영등포구</td>\n",
              "      <td>10300</td>\n",
              "      <td>영등포동2가</td>\n",
              "      <td>서울특별시 영등포구 영등포동2가 175</td>\n",
              "      <td>여의도 해링턴타워 196</td>\n",
              "      <td>11</td>\n",
              "      <td>오피스텔</td>\n",
              "      <td>18.10</td>\n",
              "      <td>준월세</td>\n",
              "      <td>...</td>\n",
              "      <td>24</td>\n",
              "      <td>330</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>133</td>\n",
              "      <td>21</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 26 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-26f0dd4d-6b48-41b4-b9b3-aa642944ba78')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-26f0dd4d-6b48-41b4-b9b3-aa642944ba78 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-26f0dd4d-6b48-41b4-b9b3-aa642944ba78');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qEujjAAUyA6P",
        "outputId": "32d73eae-2ad7-404d-bc4f-c2a8fb7c6bac"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Unnamed: 0', '자치구명', '법정동코드', '법정동명', '지번주소', '건물명', '층', '임대건물명',\n",
              "       '임대면적', '전월세구분', '보증금', '임대료', '건축년도', '연식', 'latitude', 'longitude',\n",
              "       'conv_num', 'in_din_total_300', 'in_mart_total_1000',\n",
              "       'in_subway_total_500', 'in_hosp_total_1000', 'in_cafe_total_300',\n",
              "       'police_500', 'center_500', 'in_din_total_50', 'in_subway_total_50'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 소음점수 "
      ],
      "metadata": {
        "id": "8-ok1YjmsEJN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "음식점\n"
      ],
      "metadata": {
        "id": "c4x7qr8zsFcS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "k = df['in_din_total_50'].value_counts().sort_index(ascending = True)\n",
        "\n",
        "k.plot(kind = 'bar'),k"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 966
        },
        "id": "lln_8VnOet35",
        "outputId": "57a57bfa-e282-48f9-d846-192952463c1f"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(<matplotlib.axes._subplots.AxesSubplot at 0x7f8ad87f0e90>, 0     336\n",
              " 1     103\n",
              " 2     119\n",
              " 3      80\n",
              " 4      51\n",
              " 5      46\n",
              " 6      51\n",
              " 7      65\n",
              " 8      41\n",
              " 9      18\n",
              " 10     29\n",
              " 11     11\n",
              " 12     16\n",
              " 13     37\n",
              " 14     13\n",
              " 15     40\n",
              " 16     15\n",
              " 17      4\n",
              " 18      3\n",
              " 19     15\n",
              " 20      6\n",
              " 21      9\n",
              " 22     18\n",
              " 23     11\n",
              " 24      3\n",
              " 25      7\n",
              " 26      9\n",
              " 27      5\n",
              " 28      1\n",
              " 29      1\n",
              " 30      7\n",
              " 31      5\n",
              " 32      4\n",
              " 34      1\n",
              " 40      2\n",
              " 42      2\n",
              " 45      5\n",
              " 51      1\n",
              " Name: in_din_total_50, dtype: int64)"
            ]
          },
          "metadata": {},
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "지하철\n"
      ],
      "metadata": {
        "id": "EEthK1yysG14"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "k = df['in_subway_total_50'].value_counts().sort_index(ascending = True)\n",
        "\n",
        "k.plot(kind = 'bar');\n",
        "print(k)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 315
        },
        "id": "d333khdxfJzF",
        "outputId": "f8aed09c-0a07-43d1-fcc8-32539c2e4486"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    1171\n",
            "1      19\n",
            "Name: in_subway_total_50, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 생활점수"
      ],
      "metadata": {
        "id": "iSJ9cHouuahP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "500미터 이내에 지하철역"
      ],
      "metadata": {
        "id": "wJzbFGdLv36B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "k = df['in_subway_total_500'].value_counts().sort_index(ascending = True)\n",
        "\n",
        "k.plot(kind = 'bar');\n",
        "print(k)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "BXoQWi-Zrzza",
        "outputId": "296b6be1-1f15-4409-f321-1b48fc5be87d"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    403\n",
            "1    562\n",
            "2    212\n",
            "3     13\n",
            "Name: in_subway_total_500, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "300 미터 이내에 편의점 conv_num"
      ],
      "metadata": {
        "id": "eVsfnC8-v5Qg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "k = df['conv_num'].value_counts().sort_index(ascending = True)\n",
        "\n",
        "k.plot(kind = 'bar');\n",
        "print(k)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 857
        },
        "id": "QdXXgcHUx_od",
        "outputId": "25c962ef-3e95-4f83-cdc1-d9c1c487aa0e"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0      3\n",
            "1      9\n",
            "2     32\n",
            "3     34\n",
            "4     35\n",
            "5     75\n",
            "6     95\n",
            "7     76\n",
            "8     79\n",
            "9     55\n",
            "10    83\n",
            "11    79\n",
            "12    48\n",
            "13    52\n",
            "14    38\n",
            "15    46\n",
            "16    36\n",
            "17    24\n",
            "18    22\n",
            "19    26\n",
            "20    23\n",
            "21    23\n",
            "22    17\n",
            "23    41\n",
            "24    54\n",
            "25    18\n",
            "26    18\n",
            "27     4\n",
            "28    30\n",
            "29     2\n",
            "30     9\n",
            "31     4\n",
            "Name: conv_num, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "300 미터 이내에 음식점 in_din_total_300"
      ],
      "metadata": {
        "id": "uX9ZnbYgv5HI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams[\"figure.figsize\"] = (20,10)\n",
        "\n",
        "k = df['in_din_total_300'].value_counts().sort_index(ascending = True)\n",
        "\n",
        "k.plot(kind = 'bar');\n",
        "print(k)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 835
        },
        "id": "OTgF_8WDyWAP",
        "outputId": "6ef3349b-c9c2-42d4-eb09-705d2e90aca3"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       3\n",
            "1       8\n",
            "2       7\n",
            "3       2\n",
            "5      10\n",
            "       ..\n",
            "594     1\n",
            "605     2\n",
            "642     5\n",
            "681     1\n",
            "693     5\n",
            "Name: in_din_total_300, Length: 323, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "300미터 이내에 카페 in_cafe_total_300"
      ],
      "metadata": {
        "id": "8UYpnCf7v4-S"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams[\"figure.figsize\"] = (20,10)\n",
        "\n",
        "k = df['in_cafe_total_300'].value_counts().sort_index(ascending = True)\n",
        "\n",
        "k.plot(kind = 'bar');\n",
        "print(k)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 748
        },
        "id": "sE0hmt-a0qhg",
        "outputId": "2328acf4-26d9-40d8-d31a-231da817988d"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       8\n",
            "1      16\n",
            "2      15\n",
            "3      16\n",
            "4      15\n",
            "       ..\n",
            "136     1\n",
            "139     5\n",
            "144     1\n",
            "154     1\n",
            "168     3\n",
            "Name: in_cafe_total_300, Length: 112, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "500미터 이내에 경찰서 police_500"
      ],
      "metadata": {
        "id": "qBh0cYNywEJ4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams[\"figure.figsize\"] = (20,10)\n",
        "\n",
        "k = df['police_500'].value_counts().sort_index(ascending = True)\n",
        "\n",
        "k.plot(kind = 'bar');\n",
        "print(k)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 662
        },
        "id": "EKVRKupG0yuP",
        "outputId": "89a2c744-67af-4b60-c938-a8c0f773c75c"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    414\n",
            "1    429\n",
            "2    210\n",
            "3     97\n",
            "4     23\n",
            "5     12\n",
            "6      5\n",
            "Name: police_500, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "500미터 이내에 동사무소 center_500"
      ],
      "metadata": {
        "id": "W8M4bz-JwG5Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams[\"figure.figsize\"] = (20,10)\n",
        "\n",
        "k = df['center_500'].value_counts().sort_index(ascending = True)\n",
        "\n",
        "k.plot(kind = 'bar');\n",
        "print(k)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 626
        },
        "id": "44Fr_r6o00hm",
        "outputId": "9895fec5-f288-4ea3-a073-27626213c409"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    345\n",
            "1    536\n",
            "2    264\n",
            "3     42\n",
            "4      3\n",
            "Name: center_500, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1km 이내에 병원 in_hosp_total_1000"
      ],
      "metadata": {
        "id": "xo5MeF7RwJYQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams[\"figure.figsize\"] = (30,20)\n",
        "\n",
        "k = df['in_hosp_total_1000'].value_counts().sort_index(ascending = True)\n",
        "\n",
        "k.plot(kind = 'bar');\n",
        "print(k)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 901
        },
        "id": "hDZK42Du1NB0",
        "outputId": "14f3c72f-70d7-40bc-ef8d-36210d0a7f1a"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0      1\n",
            "2      1\n",
            "5      1\n",
            "6      9\n",
            "9      1\n",
            "      ..\n",
            "755    1\n",
            "764    1\n",
            "765    1\n",
            "773    5\n",
            "790    1\n",
            "Name: in_hosp_total_1000, Length: 311, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2160x1440 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1km 이내에 대형마트 in_mart_total_1000"
      ],
      "metadata": {
        "id": "kfpeheOYwKud"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams[\"figure.figsize\"] = (20,10)\n",
        "\n",
        "k = df['in_mart_total_1000'].value_counts().sort_index(ascending = True)\n",
        "\n",
        "k.plot(kind = 'bar');\n",
        "print(k)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 774
        },
        "id": "Q6p44uF-ud0X",
        "outputId": "98071246-8c67-4568-dd1d-655645f8642e"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0      19\n",
            "1      71\n",
            "2     167\n",
            "3     241\n",
            "4     241\n",
            "5     233\n",
            "6     140\n",
            "7      35\n",
            "8      24\n",
            "9       7\n",
            "10      3\n",
            "11      5\n",
            "12      4\n",
            "Name: in_mart_total_1000, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 로버스트 스캐일러"
      ],
      "metadata": {
        "id": "RaZfiy2t6AFI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 바꿀것들만 떼어내기 "
      ],
      "metadata": {
        "id": "y216t5JE6YH8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "robust = df[['conv_num',\n",
        "       'in_din_total_300', 'in_mart_total_1000', 'in_subway_total_500',\n",
        "       'in_hosp_total_1000', 'in_cafe_total_300', 'police_500', 'center_500',\n",
        "       'in_din_total_50', 'in_subway_total_50']]"
      ],
      "metadata": {
        "id": "Pv__gnX06dwR"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import sklearn\n",
        "from sklearn.preprocessing import RobustScaler\n",
        "\n",
        "scaler = RobustScaler()\n",
        "\n",
        "df_robust = scaler.fit_transform(robust)\n",
        "df_robust = pd.DataFrame(df_robust, columns = ['conv_num',\n",
        "       'in_din_total_300', 'in_mart_total_1000', 'in_subway_total_500',\n",
        "       'in_hosp_total_1000', 'in_cafe_total_300', 'police_500', 'center_500',\n",
        "       'in_din_total_50', 'in_subway_total_50'])\n",
        "df_robust"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "KSchawZDBpuF",
        "outputId": "3192ebbd-3250-4bec-defc-b244a92e683c"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      conv_num  in_din_total_300  in_mart_total_1000  in_subway_total_500  \\\n",
              "0          0.7          0.997326                 1.5                  1.0   \n",
              "1          0.7          0.997326                 1.5                  1.0   \n",
              "2          1.3          1.024064                 0.0                  1.0   \n",
              "3          1.3          1.024064                 0.0                  1.0   \n",
              "4          1.3          1.024064                 0.0                  1.0   \n",
              "...        ...               ...                 ...                  ...   \n",
              "1185       0.5          0.088235                -0.5                  0.0   \n",
              "1186      -0.2          0.163102                -1.0                  0.0   \n",
              "1187      -0.1         -0.072193                -1.0                  0.0   \n",
              "1188      -0.1         -0.072193                -1.0                  0.0   \n",
              "1189      -0.3          0.312834                 1.0                  0.0   \n",
              "\n",
              "      in_hosp_total_1000  in_cafe_total_300  police_500  center_500  \\\n",
              "0              -0.129630           0.926829        -0.5         0.5   \n",
              "1              -0.129630           0.926829        -0.5         0.5   \n",
              "2              -0.083333          -0.243902         0.5         0.0   \n",
              "3              -0.083333          -0.243902         0.5         0.0   \n",
              "4              -0.083333          -0.243902         0.5         0.0   \n",
              "...                  ...                ...         ...         ...   \n",
              "1185            0.768519          -0.243902         0.0         0.0   \n",
              "1186            0.009259          -0.170732         0.5         0.0   \n",
              "1187           -0.768519          -0.170732         0.5         0.0   \n",
              "1188           -0.768519          -0.170732         0.5         0.0   \n",
              "1189            0.259259           0.243902         0.5         0.0   \n",
              "\n",
              "      in_din_total_50  in_subway_total_50  \n",
              "0            0.571429                 0.0  \n",
              "1            0.571429                 0.0  \n",
              "2           -0.114286                 0.0  \n",
              "3           -0.114286                 0.0  \n",
              "4           -0.114286                 0.0  \n",
              "...               ...                 ...  \n",
              "1185        -0.342857                 0.0  \n",
              "1186         1.142857                 0.0  \n",
              "1187         1.371429                 0.0  \n",
              "1188         1.371429                 0.0  \n",
              "1189         1.485714                 0.0  \n",
              "\n",
              "[1190 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c156cf7b-833c-432b-98b6-b208dab041a6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>conv_num</th>\n",
              "      <th>in_din_total_300</th>\n",
              "      <th>in_mart_total_1000</th>\n",
              "      <th>in_subway_total_500</th>\n",
              "      <th>in_hosp_total_1000</th>\n",
              "      <th>in_cafe_total_300</th>\n",
              "      <th>police_500</th>\n",
              "      <th>center_500</th>\n",
              "      <th>in_din_total_50</th>\n",
              "      <th>in_subway_total_50</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.7</td>\n",
              "      <td>0.997326</td>\n",
              "      <td>1.5</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.129630</td>\n",
              "      <td>0.926829</td>\n",
              "      <td>-0.5</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.571429</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.7</td>\n",
              "      <td>0.997326</td>\n",
              "      <td>1.5</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.129630</td>\n",
              "      <td>0.926829</td>\n",
              "      <td>-0.5</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.571429</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.3</td>\n",
              "      <td>1.024064</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.083333</td>\n",
              "      <td>-0.243902</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-0.114286</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.3</td>\n",
              "      <td>1.024064</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.083333</td>\n",
              "      <td>-0.243902</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-0.114286</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.3</td>\n",
              "      <td>1.024064</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.083333</td>\n",
              "      <td>-0.243902</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-0.114286</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1185</th>\n",
              "      <td>0.5</td>\n",
              "      <td>0.088235</td>\n",
              "      <td>-0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.768519</td>\n",
              "      <td>-0.243902</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-0.342857</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1186</th>\n",
              "      <td>-0.2</td>\n",
              "      <td>0.163102</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.009259</td>\n",
              "      <td>-0.170732</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.142857</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1187</th>\n",
              "      <td>-0.1</td>\n",
              "      <td>-0.072193</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-0.768519</td>\n",
              "      <td>-0.170732</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.371429</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1188</th>\n",
              "      <td>-0.1</td>\n",
              "      <td>-0.072193</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-0.768519</td>\n",
              "      <td>-0.170732</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.371429</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1189</th>\n",
              "      <td>-0.3</td>\n",
              "      <td>0.312834</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.259259</td>\n",
              "      <td>0.243902</td>\n",
              "      <td>0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.485714</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1190 rows × 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c156cf7b-833c-432b-98b6-b208dab041a6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c156cf7b-833c-432b-98b6-b208dab041a6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c156cf7b-833c-432b-98b6-b208dab041a6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 생활점수"
      ],
      "metadata": {
        "id": "jaGON8qZzas1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# in_din_total_300 ,  conv_num\n",
        "\n",
        "in_din_total_300 = df_robust['in_din_total_300']\n",
        "in_din_total_300 = round((in_din_total_300/14)*100,2)\n",
        "\n",
        "in_cafe_total_300 = df_robust['in_cafe_total_300'] \n",
        "in_cafe_total_300 = round((in_cafe_total_300/14)*100,2)\n",
        "\n",
        "conv_din = pd.DataFrame()\n",
        "conv_din['cafe_score'] = in_cafe_total_300\n",
        "conv_din['din_score'] = in_din_total_300\n",
        "\n",
        "score = in_cafe_total_300 + in_din_total_300\n",
        "conv_din['score'] = score\n",
        "conv_din"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "nnyy1_r6GZCT",
        "outputId": "83883903-5d15-4917-f3e0-5b1cf6261027"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      cafe_score  din_score  score\n",
              "0           6.62       7.12  13.74\n",
              "1           6.62       7.12  13.74\n",
              "2          -1.74       7.31   5.57\n",
              "3          -1.74       7.31   5.57\n",
              "4          -1.74       7.31   5.57\n",
              "...          ...        ...    ...\n",
              "1185       -1.74       0.63  -1.11\n",
              "1186       -1.22       1.17  -0.05\n",
              "1187       -1.22      -0.52  -1.74\n",
              "1188       -1.22      -0.52  -1.74\n",
              "1189        1.74       2.23   3.97\n",
              "\n",
              "[1190 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88d4aeeb-4bdd-444a-a0cc-dd0d999c9360\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cafe_score</th>\n",
              "      <th>din_score</th>\n",
              "      <th>score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6.62</td>\n",
              "      <td>7.12</td>\n",
              "      <td>13.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6.62</td>\n",
              "      <td>7.12</td>\n",
              "      <td>13.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-1.74</td>\n",
              "      <td>7.31</td>\n",
              "      <td>5.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-1.74</td>\n",
              "      <td>7.31</td>\n",
              "      <td>5.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-1.74</td>\n",
              "      <td>7.31</td>\n",
              "      <td>5.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1185</th>\n",
              "      <td>-1.74</td>\n",
              "      <td>0.63</td>\n",
              "      <td>-1.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1186</th>\n",
              "      <td>-1.22</td>\n",
              "      <td>1.17</td>\n",
              "      <td>-0.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1187</th>\n",
              "      <td>-1.22</td>\n",
              "      <td>-0.52</td>\n",
              "      <td>-1.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1188</th>\n",
              "      <td>-1.22</td>\n",
              "      <td>-0.52</td>\n",
              "      <td>-1.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1189</th>\n",
              "      <td>1.74</td>\n",
              "      <td>2.23</td>\n",
              "      <td>3.97</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1190 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88d4aeeb-4bdd-444a-a0cc-dd0d999c9360')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-88d4aeeb-4bdd-444a-a0cc-dd0d999c9360 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-88d4aeeb-4bdd-444a-a0cc-dd0d999c9360');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 점수화 만들기 "
      ],
      "metadata": {
        "id": "elS7YTfEAXxS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "number = df[['conv_num',\n",
        "        'in_mart_total_1000', 'in_subway_total_500',\n",
        "       'in_hosp_total_1000',  'police_500', 'center_500']]\n",
        "       \n",
        "noisy = df[['in_din_total_50', 'in_subway_total_50', 'in_subway_total_500']]"
      ],
      "metadata": {
        "id": "C2ulirqFAVhO"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "number.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "H99UWeW2AcMi",
        "outputId": "f93dd2bf-336d-48fc-cebe-26ebf207a342"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          conv_num  in_mart_total_1000  in_subway_total_500  \\\n",
              "count  1190.000000         1190.000000          1190.000000   \n",
              "mean     12.470588            3.974790             0.861345   \n",
              "std       7.240694            1.863113             0.736026   \n",
              "min       0.000000            0.000000             0.000000   \n",
              "25%       7.000000            3.000000             0.000000   \n",
              "50%      11.000000            4.000000             1.000000   \n",
              "75%      17.000000            5.000000             1.000000   \n",
              "max      31.000000           12.000000             3.000000   \n",
              "\n",
              "       in_hosp_total_1000   police_500   center_500  \n",
              "count         1190.000000  1190.000000  1190.000000  \n",
              "mean           181.252941     1.110924     1.010084  \n",
              "std            149.341056     1.131162     0.822251  \n",
              "min              0.000000     0.000000     0.000000  \n",
              "25%             99.000000     0.000000     0.000000  \n",
              "50%            142.000000     1.000000     1.000000  \n",
              "75%            207.000000     2.000000     2.000000  \n",
              "max            790.000000     6.000000     4.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2d4d21cc-98ff-4e82-a031-45b62347d2f3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>conv_num</th>\n",
              "      <th>in_mart_total_1000</th>\n",
              "      <th>in_subway_total_500</th>\n",
              "      <th>in_hosp_total_1000</th>\n",
              "      <th>police_500</th>\n",
              "      <th>center_500</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1190.000000</td>\n",
              "      <td>1190.000000</td>\n",
              "      <td>1190.000000</td>\n",
              "      <td>1190.000000</td>\n",
              "      <td>1190.000000</td>\n",
              "      <td>1190.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>12.470588</td>\n",
              "      <td>3.974790</td>\n",
              "      <td>0.861345</td>\n",
              "      <td>181.252941</td>\n",
              "      <td>1.110924</td>\n",
              "      <td>1.010084</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>7.240694</td>\n",
              "      <td>1.863113</td>\n",
              "      <td>0.736026</td>\n",
              "      <td>149.341056</td>\n",
              "      <td>1.131162</td>\n",
              "      <td>0.822251</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>7.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>11.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>142.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>17.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>207.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>31.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>790.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>4.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2d4d21cc-98ff-4e82-a031-45b62347d2f3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2d4d21cc-98ff-4e82-a031-45b62347d2f3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2d4d21cc-98ff-4e82-a031-45b62347d2f3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def fuction_20(x):\n",
        "  if x == 0:\n",
        "    return 0\n",
        "  else:\n",
        "    return 20"
      ],
      "metadata": {
        "id": "x8APbpnqMuWM"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def fuction_10(x):\n",
        "  if x == 0:\n",
        "    return 0\n",
        "  else:\n",
        "    return 10"
      ],
      "metadata": {
        "id": "qACm0WSyuGem"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def fuction_5(x):\n",
        "  if x == 0:\n",
        "    return 0\n",
        "  else:\n",
        "    return 5"
      ],
      "metadata": {
        "id": "fykGjY4buMiW"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 편의점 20점 \n",
        "conv_score = number[\"conv_num\"].apply(lambda x : fuction_20(x))\n",
        "# 대형마트 5점 in_mart_total_1000\n",
        "mart_score = number[\"in_mart_total_1000\"].apply(lambda x : fuction_5(x))\n",
        "# 지하철 20점 in_subway_total_500\n",
        "subway_score = number[\"in_subway_total_500\"].apply(lambda x : fuction_20(x))\n",
        "# 경찰서 10점 police_500\n",
        "police_score = number[\"police_500\"].apply(lambda x : fuction_10(x))\n",
        "# 병원 10점 \n",
        "hos_score = number[\"in_hosp_total_1000\"].apply(lambda x : fuction_10(x))\n",
        "# 동사무소 5점 center_500\n",
        "center_score = number[\"center_500\"].apply(lambda x : fuction_5(x))"
      ],
      "metadata": {
        "id": "mSgyRh_tAdb0"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "conv_num"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "owPpGsBPOTNH",
        "outputId": "404ee420-63fb-4087-c9e0-32e76c52eb70"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       20\n",
              "1       20\n",
              "2       20\n",
              "3       20\n",
              "4       20\n",
              "        ..\n",
              "1185    20\n",
              "1186    20\n",
              "1187    20\n",
              "1188    20\n",
              "1189    20\n",
              "Name: conv_num, Length: 1190, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "score_another = pd.DataFrame()\n",
        "score_another['conv_score'] = conv_score\n",
        "score_another['mart_score'] = mart_score\n",
        "score_another['subway_score'] = subway_score\n",
        "score_another['police_score'] = police_score\n",
        "score_another['hos_score'] = hos_score\n",
        "score_another['center_score'] = center_score\n",
        "\n",
        "score_sum_an = conv_score + mart_score + subway_score + police_score + hos_score + center_score\n",
        "score_another['score_sum_an'] = score_sum_an\n",
        "score_another"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "Gk7vVHtXuET7",
        "outputId": "4eff8d41-1206-43c5-ee61-b51d2d47b4a8"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      conv_score  mart_score  subway_score  police_score  hos_score  \\\n",
              "0             20           5            20             0         10   \n",
              "1             20           5            20             0         10   \n",
              "2             20           5            20            10         10   \n",
              "3             20           5            20            10         10   \n",
              "4             20           5            20            10         10   \n",
              "...          ...         ...           ...           ...        ...   \n",
              "1185          20           5            20            10         10   \n",
              "1186          20           5            20            10         10   \n",
              "1187          20           5            20            10         10   \n",
              "1188          20           5            20            10         10   \n",
              "1189          20           5            20            10         10   \n",
              "\n",
              "      center_score  score_sum_an  \n",
              "0                5            60  \n",
              "1                5            60  \n",
              "2                5            70  \n",
              "3                5            70  \n",
              "4                5            70  \n",
              "...            ...           ...  \n",
              "1185             5            70  \n",
              "1186             5            70  \n",
              "1187             5            70  \n",
              "1188             5            70  \n",
              "1189             5            70  \n",
              "\n",
              "[1190 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-27af5d87-c240-42c9-96c8-2158b4b01021\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>conv_score</th>\n",
              "      <th>mart_score</th>\n",
              "      <th>subway_score</th>\n",
              "      <th>police_score</th>\n",
              "      <th>hos_score</th>\n",
              "      <th>center_score</th>\n",
              "      <th>score_sum_an</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1185</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1186</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1187</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1188</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1189</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1190 rows × 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-27af5d87-c240-42c9-96c8-2158b4b01021')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-27af5d87-c240-42c9-96c8-2158b4b01021 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-27af5d87-c240-42c9-96c8-2158b4b01021');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "life_score = pd.concat([score_another, conv_din], axis = 1)\n",
        "all_score_life  = life_score['score_sum_an'] + life_score['score']\n",
        "life_score['all_score_life'] = all_score_life\n",
        "life_score"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "K0sk1iyawkTs",
        "outputId": "83345951-bccf-4945-d647-795953987592"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      conv_score  mart_score  subway_score  police_score  hos_score  \\\n",
              "0             20           5            20             0         10   \n",
              "1             20           5            20             0         10   \n",
              "2             20           5            20            10         10   \n",
              "3             20           5            20            10         10   \n",
              "4             20           5            20            10         10   \n",
              "...          ...         ...           ...           ...        ...   \n",
              "1185          20           5            20            10         10   \n",
              "1186          20           5            20            10         10   \n",
              "1187          20           5            20            10         10   \n",
              "1188          20           5            20            10         10   \n",
              "1189          20           5            20            10         10   \n",
              "\n",
              "      center_score  score_sum_an  cafe_score  din_score  score  all_score_life  \n",
              "0                5            60        6.62       7.12  13.74           73.74  \n",
              "1                5            60        6.62       7.12  13.74           73.74  \n",
              "2                5            70       -1.74       7.31   5.57           75.57  \n",
              "3                5            70       -1.74       7.31   5.57           75.57  \n",
              "4                5            70       -1.74       7.31   5.57           75.57  \n",
              "...            ...           ...         ...        ...    ...             ...  \n",
              "1185             5            70       -1.74       0.63  -1.11           68.89  \n",
              "1186             5            70       -1.22       1.17  -0.05           69.95  \n",
              "1187             5            70       -1.22      -0.52  -1.74           68.26  \n",
              "1188             5            70       -1.22      -0.52  -1.74           68.26  \n",
              "1189             5            70        1.74       2.23   3.97           73.97  \n",
              "\n",
              "[1190 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d4cc6cc2-4821-4480-9bcc-18c1b3750794\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>conv_score</th>\n",
              "      <th>mart_score</th>\n",
              "      <th>subway_score</th>\n",
              "      <th>police_score</th>\n",
              "      <th>hos_score</th>\n",
              "      <th>center_score</th>\n",
              "      <th>score_sum_an</th>\n",
              "      <th>cafe_score</th>\n",
              "      <th>din_score</th>\n",
              "      <th>score</th>\n",
              "      <th>all_score_life</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>60</td>\n",
              "      <td>6.62</td>\n",
              "      <td>7.12</td>\n",
              "      <td>13.74</td>\n",
              "      <td>73.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>60</td>\n",
              "      <td>6.62</td>\n",
              "      <td>7.12</td>\n",
              "      <td>13.74</td>\n",
              "      <td>73.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "      <td>-1.74</td>\n",
              "      <td>7.31</td>\n",
              "      <td>5.57</td>\n",
              "      <td>75.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "      <td>-1.74</td>\n",
              "      <td>7.31</td>\n",
              "      <td>5.57</td>\n",
              "      <td>75.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "      <td>-1.74</td>\n",
              "      <td>7.31</td>\n",
              "      <td>5.57</td>\n",
              "      <td>75.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1185</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "      <td>-1.74</td>\n",
              "      <td>0.63</td>\n",
              "      <td>-1.11</td>\n",
              "      <td>68.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1186</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "      <td>-1.22</td>\n",
              "      <td>1.17</td>\n",
              "      <td>-0.05</td>\n",
              "      <td>69.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1187</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "      <td>-1.22</td>\n",
              "      <td>-0.52</td>\n",
              "      <td>-1.74</td>\n",
              "      <td>68.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1188</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "      <td>-1.22</td>\n",
              "      <td>-0.52</td>\n",
              "      <td>-1.74</td>\n",
              "      <td>68.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1189</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>70</td>\n",
              "      <td>1.74</td>\n",
              "      <td>2.23</td>\n",
              "      <td>3.97</td>\n",
              "      <td>73.97</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1190 rows × 11 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d4cc6cc2-4821-4480-9bcc-18c1b3750794')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d4cc6cc2-4821-4480-9bcc-18c1b3750794 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d4cc6cc2-4821-4480-9bcc-18c1b3750794');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "life_score = life_score.drop(columns = ['score_sum_an', 'score'])\n",
        "life_score"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "yLlveqLixye_",
        "outputId": "8132eea9-49ef-48b3-dd9c-96cd82144c2c"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      conv_score  mart_score  subway_score  police_score  hos_score  \\\n",
              "0             20           5            20             0         10   \n",
              "1             20           5            20             0         10   \n",
              "2             20           5            20            10         10   \n",
              "3             20           5            20            10         10   \n",
              "4             20           5            20            10         10   \n",
              "...          ...         ...           ...           ...        ...   \n",
              "1185          20           5            20            10         10   \n",
              "1186          20           5            20            10         10   \n",
              "1187          20           5            20            10         10   \n",
              "1188          20           5            20            10         10   \n",
              "1189          20           5            20            10         10   \n",
              "\n",
              "      center_score  cafe_score  din_score  all_score_life  \n",
              "0                5        6.62       7.12           73.74  \n",
              "1                5        6.62       7.12           73.74  \n",
              "2                5       -1.74       7.31           75.57  \n",
              "3                5       -1.74       7.31           75.57  \n",
              "4                5       -1.74       7.31           75.57  \n",
              "...            ...         ...        ...             ...  \n",
              "1185             5       -1.74       0.63           68.89  \n",
              "1186             5       -1.22       1.17           69.95  \n",
              "1187             5       -1.22      -0.52           68.26  \n",
              "1188             5       -1.22      -0.52           68.26  \n",
              "1189             5        1.74       2.23           73.97  \n",
              "\n",
              "[1190 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e464a60b-e4c2-45ad-9cc8-03b3f64a976d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>conv_score</th>\n",
              "      <th>mart_score</th>\n",
              "      <th>subway_score</th>\n",
              "      <th>police_score</th>\n",
              "      <th>hos_score</th>\n",
              "      <th>center_score</th>\n",
              "      <th>cafe_score</th>\n",
              "      <th>din_score</th>\n",
              "      <th>all_score_life</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>6.62</td>\n",
              "      <td>7.12</td>\n",
              "      <td>73.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>6.62</td>\n",
              "      <td>7.12</td>\n",
              "      <td>73.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>-1.74</td>\n",
              "      <td>7.31</td>\n",
              "      <td>75.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>-1.74</td>\n",
              "      <td>7.31</td>\n",
              "      <td>75.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>-1.74</td>\n",
              "      <td>7.31</td>\n",
              "      <td>75.57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1185</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>-1.74</td>\n",
              "      <td>0.63</td>\n",
              "      <td>68.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1186</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>-1.22</td>\n",
              "      <td>1.17</td>\n",
              "      <td>69.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1187</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>-1.22</td>\n",
              "      <td>-0.52</td>\n",
              "      <td>68.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1188</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>-1.22</td>\n",
              "      <td>-0.52</td>\n",
              "      <td>68.26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1189</th>\n",
              "      <td>20</td>\n",
              "      <td>5</td>\n",
              "      <td>20</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>1.74</td>\n",
              "      <td>2.23</td>\n",
              "      <td>73.97</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1190 rows × 9 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e464a60b-e4c2-45ad-9cc8-03b3f64a976d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e464a60b-e4c2-45ad-9cc8-03b3f64a976d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e464a60b-e4c2-45ad-9cc8-03b3f64a976d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### 이제 소음점수"
      ],
      "metadata": {
        "id": "2MiImmIRzXKS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# noisy \n",
        "noisy"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "KxGs-DOzyBkH",
        "outputId": "2a589762-6daf-4c91-bc28-8e343b79e5d1"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      in_din_total_50  in_subway_total_50  in_subway_total_500\n",
              "0                   8                   0                    2\n",
              "1                   8                   0                    2\n",
              "2                   2                   0                    2\n",
              "3                   2                   0                    2\n",
              "4                   2                   0                    2\n",
              "...               ...                 ...                  ...\n",
              "1185                0                   0                    1\n",
              "1186               13                   0                    1\n",
              "1187               15                   0                    1\n",
              "1188               15                   0                    1\n",
              "1189               16                   0                    1\n",
              "\n",
              "[1190 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-69aea41a-166c-4d29-872d-1b10898aef0b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>in_din_total_50</th>\n",
              "      <th>in_subway_total_50</th>\n",
              "      <th>in_subway_total_500</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1185</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1186</th>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1187</th>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1188</th>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1189</th>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1190 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-69aea41a-166c-4d29-872d-1b10898aef0b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-69aea41a-166c-4d29-872d-1b10898aef0b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-69aea41a-166c-4d29-872d-1b10898aef0b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "noisy.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "aLcBkfWY38c8",
        "outputId": "85b33dbf-4136-477d-a383-ee65e829d4c8"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       in_din_total_50  in_subway_total_50  in_subway_total_500\n",
              "count      1190.000000         1190.000000          1190.000000\n",
              "mean          6.199160            0.015966             0.861345\n",
              "std           8.022456            0.125398             0.736026\n",
              "min           0.000000            0.000000             0.000000\n",
              "25%           0.000000            0.000000             0.000000\n",
              "50%           3.000000            0.000000             1.000000\n",
              "75%           8.750000            0.000000             1.000000\n",
              "max          51.000000            1.000000             3.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-152f1a34-62c2-4b86-87f9-377d10172d16\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>in_din_total_50</th>\n",
              "      <th>in_subway_total_50</th>\n",
              "      <th>in_subway_total_500</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1190.000000</td>\n",
              "      <td>1190.000000</td>\n",
              "      <td>1190.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>6.199160</td>\n",
              "      <td>0.015966</td>\n",
              "      <td>0.861345</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>8.022456</td>\n",
              "      <td>0.125398</td>\n",
              "      <td>0.736026</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.750000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>51.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-152f1a34-62c2-4b86-87f9-377d10172d16')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-152f1a34-62c2-4b86-87f9-377d10172d16 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-152f1a34-62c2-4b86-87f9-377d10172d16');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 0 ~ 3 : 12점\n",
        "# 4 ~ 6 : 24점 \n",
        "# 7 ~ 14 : 36점\n",
        "# 15 이상 : 48점 \n",
        "def food_(x):\n",
        "  if x < 4:\n",
        "    return 12\n",
        "  elif 4 <=  x <= 6:\n",
        "    return 24\n",
        "  elif 7 <=  x <= 14:\n",
        "    return 36\n",
        "  else:\n",
        "    return 48"
      ],
      "metadata": {
        "id": "_MJrqXO5053Q"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def subway(x):\n",
        "  if x == 0:\n",
        "    return 0\n",
        "  elif x == 1:\n",
        "    return 15\n",
        "  elif x == 2:\n",
        "    return 30\n",
        "  else:\n",
        "    return 45"
      ],
      "metadata": {
        "id": "wG3d_TdI0wvm"
      },
      "execution_count": 70,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def sub2(x):\n",
        "  if x == 1:\n",
        "    return 50\n",
        "  else:\n",
        "    return 0"
      ],
      "metadata": {
        "id": "PGURzYRm2tNz"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dining = noisy[\"in_din_total_50\"].apply(lambda x : food_(x))\n",
        "subway_total_50 = noisy[\"in_subway_total_50\"].apply(lambda x : sub2(x))\n",
        "subway_total_500 = noisy[\"in_subway_total_500\"].apply(lambda x : subway(x))"
      ],
      "metadata": {
        "id": "yiL0AUbn20NC"
      },
      "execution_count": 72,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " subway = subway_total_50 + subway_total_500"
      ],
      "metadata": {
        "id": "SnNW3Y6z3IXX"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "score_noise = pd.DataFrame()\n",
        "score_noise['subway'] = subway\n",
        "score_noise['in_din_total_50'] = dining\n",
        "score_noise['nois_total'] = score_noise['subway'] + score_noise['in_din_total_50']\n",
        "score_noise"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "BPGAUdkH3MmE",
        "outputId": "2b7257a2-a9ca-4f61-ba8c-2519aea8a7bf"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      subway  in_din_total_50  nois_total\n",
              "0         30               36          66\n",
              "1         30               36          66\n",
              "2         30               12          42\n",
              "3         30               12          42\n",
              "4         30               12          42\n",
              "...      ...              ...         ...\n",
              "1185      15               12          27\n",
              "1186      15               36          51\n",
              "1187      15               48          63\n",
              "1188      15               48          63\n",
              "1189      15               48          63\n",
              "\n",
              "[1190 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ba31067a-4083-4249-9759-091683badf60\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>subway</th>\n",
              "      <th>in_din_total_50</th>\n",
              "      <th>nois_total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>30</td>\n",
              "      <td>36</td>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>30</td>\n",
              "      <td>36</td>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>30</td>\n",
              "      <td>12</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>30</td>\n",
              "      <td>12</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>30</td>\n",
              "      <td>12</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1185</th>\n",
              "      <td>15</td>\n",
              "      <td>12</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1186</th>\n",
              "      <td>15</td>\n",
              "      <td>36</td>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1187</th>\n",
              "      <td>15</td>\n",
              "      <td>48</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1188</th>\n",
              "      <td>15</td>\n",
              "      <td>48</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1189</th>\n",
              "      <td>15</td>\n",
              "      <td>48</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1190 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba31067a-4083-4249-9759-091683badf60')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ba31067a-4083-4249-9759-091683badf60 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ba31067a-4083-4249-9759-091683badf60');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "score_life = life_score[['all_score_life']]\n",
        "noisy_score = score_noise[['nois_total']]\n",
        "score = pd.concat([score_life, noisy_score], axis = 1)"
      ],
      "metadata": {
        "id": "7t1C4bRX6L9y"
      },
      "execution_count": 76,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "score"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "84plhioD6_Fk",
        "outputId": "a79b088a-9eae-4fb9-ef0f-c9db3ea2d81f"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      all_score_life  nois_total\n",
              "0              73.74          66\n",
              "1              73.74          66\n",
              "2              75.57          42\n",
              "3              75.57          42\n",
              "4              75.57          42\n",
              "...              ...         ...\n",
              "1185           68.89          27\n",
              "1186           69.95          51\n",
              "1187           68.26          63\n",
              "1188           68.26          63\n",
              "1189           73.97          63\n",
              "\n",
              "[1190 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e3858d54-bd11-425c-a315-d37e3fa063c5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>all_score_life</th>\n",
              "      <th>nois_total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>73.74</td>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>73.74</td>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>75.57</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>75.57</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>75.57</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1185</th>\n",
              "      <td>68.89</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1186</th>\n",
              "      <td>69.95</td>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1187</th>\n",
              "      <td>68.26</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1188</th>\n",
              "      <td>68.26</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1189</th>\n",
              "      <td>73.97</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1190 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e3858d54-bd11-425c-a315-d37e3fa063c5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e3858d54-bd11-425c-a315-d37e3fa063c5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e3858d54-bd11-425c-a315-d37e3fa063c5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.concat([df,score], axis = 1)"
      ],
      "metadata": {
        "id": "kZuNNhpz7AFb"
      },
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_csv('/content/drive/MyDrive/DATA/비저블 맵 프로젝트/진짜 사용할 데이터/estate_score.csv')"
      ],
      "metadata": {
        "id": "UCLQgTWd7L5G"
      },
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "aCOSzq9Z7Whj"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}